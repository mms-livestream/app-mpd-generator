/*jslint node: true */
/*jshint esversion: 6 */
'use strict';

//Dependencies

const Promise = require('bluebird');  //jshint ignore:line


function formatTimeMPD(date) {
  console.log("testdate");
  console.log(date);
  console.log(date.getHours);
  console.log("ok");
  let hour = date.getHours() - 2;
  hour = (hour < 10 ? "0" : "") + hour;
  let min  = date.getMinutes();
  min = (min < 10 ? "0" : "") + min;
  let secAvailability  = date.getSeconds() + 0;//see for the time
  secAvailability = (secAvailability < 10 ? "0" : "") + secAvailability;
  let year = date.getFullYear();
  let month = date.getMonth() + 1;
  month = (month < 10 ? "0" : "") + month;
  let day  = date.getDate();
  day = (day < 10 ? "0" : "") + day;

  //Format : YYYY:MM:DD:HH:MM:SS
  let formatTime = year + "-" + month + "-" + day + "T" + hour + ":" + min + ":" + secAvailability + ".000";

  return formatTime;
}



function generateMPD(id_uploader, servers, PREVinitialTime, PREVid_video, publishTimeRaw) {
    let serversURLs="";
    let availabilityStartTime = ""
    let publishTime = "";
    let dateNow = new Date();
    //let publishTime = formatTimeMPD(publishTimeRaw);

    //Generating the live servers URLs
    for (let i = 0; i < servers.length; i++) {
      serversURLs += `<BaseURL>http://${servers[i]}:8080/api/description/${id_uploader}/</BaseURL>`;
    }

    //First time generating MPD or changing video
    console.log(PREVinitialTime);
    console.log(typeof id_uploader);
    console.log(typeof PREVid_video);
    console.log((id_uploader !== PREVid_video));

    publishTimeRaw.setSeconds(publishTimeRaw.getSeconds() + 30);  //fix add delay fix
    availabilityStartTime = formatTimeMPD(publishTimeRaw);  //fix inversed

    if (typeof PREVinitialTime === "undefined" || (id_uploader !== PREVid_video)) {
      console.log("First time generating MPD or changing video");


      //console.log("outside");
      /*
      let hour = date.getHours() - 2;
      hour = (hour < 10 ? "0" : "") + hour;
      let min  = date.getMinutes();
      min = (min < 10 ? "0" : "") + min;
      let secAvailability  = date.getSeconds() + 0;//see for the time
      secAvailability = (secAvailability < 10 ? "0" : "") + secAvailability;
      let secPublish  = date.getSeconds() + 0; //see for the time
      secPublish = (secPublish < 10 ? "0" : "") + secPublish;
      let year = date.getFullYear();
      let month = date.getMonth() + 1;
      month = (month < 10 ? "0" : "") + month;
      let day  = date.getDate();
      day = (day < 10 ? "0" : "") + day;*/


      publishTime = formatTimeMPD(dateNow);


      //Format : YYYY:MM:DD:HH:MM:SS
      //availabilityStartTime = year + "-" + month + "-" + day + "T" + hour + ":" + min + ":" + secAvailability + ".000";
      //publishTime = year + "-" + month + "-" + day + "T" + hour + ":" + min + ":" + secPublish + ".000";

    } else {  //MPD already generated : maintaining initial time
      console.log("MPD already generated and same video");

      publishTime = formatTimeMPD(dateNow);
      //availabilityStartTime = PREVinitialTime;
      //publishTime = PREVinitialTime;
    }

    let mpd =

`<?xml version="1.0"?>
<MPD xmlns="urn:mpeg:dash:schema:mpd:2011" minBufferTime="PT1.500S" type="dynamic" availabilityStartTime="${availabilityStartTime}" publishTime="${publishTime}" maxSegmentDuration="PT0H0M6.000S" minimumUpdatePeriod="P0Y0M0DT0H10M30.000S" profiles="urn:mpeg:dash:profile:isoff-live:2011" GOP="12" numberOfServers="1">
<ProgramInformation moreInformationURL="http://gpac.sourceforge.net">
<Title>mpd.mpd generated by GPAC</Title>
</ProgramInformation>
<Period id="p0" start="P0Y0M0DT0H0M0.000S">

<AdaptationSet segmentAlignment="true" maxWidth="640" maxHeight="480" maxFrameRate="24" par="16:9" lang="und">

${serversURLs}

<SegmentTemplate media="$Bandwidth$/out$Bandwidth$_dash$Number$.m4s" startNumber="1" duration="6" initialization="$Bandwidth$/out$Bandwidth$_dash.mp4"/>
<Representation id="1" mimeType="video/mp4" codecs="avc1.4d4028" width="640" height="480" frameRate="24" sar="4:3" startWithSAP="1" bandwidth="500000"></Representation>
<Representation id="2" mimeType="video/mp4" codecs="avc1.4d4028" width="640" height="480" frameRate="24" sar="4:3" startWithSAP="1" bandwidth="1000000"></Representation>
<Representation id="3" mimeType="video/mp4" codecs="avc1.4d4028" width="640" height="480" frameRate="24" sar="4:3" startWithSAP="1" bandwidth="2000000"></Representation>
</AdaptationSet>
</Period>
</MPD> `


 // return console.log(mpd);
 return mpd;
}

//API

module.exports = function (options) {

    //let service = options.service;

    /**
     * Update mpd
     * @function
     */
    this.add('role:mpd,cmd:generate', (msg, respond) => {
        let validation = new Promise((resolve, reject) => {
            //TODO
            resolve();
        });

        validation.then(() => {
        })
        .then(() => {return new Promise( (resolve, reject) => {
            console.log(`Generating MPD with ${msg}`);
            let MPDString = generateMPD(msg.id_uploader, msg.servers, msg.PREVinitialTime, msg.PREVid_video, new Date(msg.publishTime));   //PREVinitialTime defined only when MPD already generated
            respond(null, { 'code': 200 , 'status': "MPD string generated succesfully", "data": MPDString});
            resolve();
        });})
        .catch(err => {
            respond(`Error on generating mpd: ${err}`, { 'code': 500 , 'status': null });
        });
    });

};
